// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.6
// source: agent.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentAPIClient is the client API for AgentAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentAPIClient interface {
	Payments(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*Empty, error)
	LatestPayment(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TimestampResponse, error)
	Invoices(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*Empty, error)
	LatestInvoice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TimestampResponse, error)
	Forwards(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*Empty, error)
	LatestForward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TimestampResponse, error)
	LiquidityAds(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*Empty, error)
	LatestLiquidityAd(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TimestampResponse, error)
}

type agentAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentAPIClient(cc grpc.ClientConnInterface) AgentAPIClient {
	return &agentAPIClient{cc}
}

func (c *agentAPIClient) Payments(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/agent.AgentAPI/Payments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) LatestPayment(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TimestampResponse, error) {
	out := new(TimestampResponse)
	err := c.cc.Invoke(ctx, "/agent.AgentAPI/LatestPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) Invoices(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/agent.AgentAPI/Invoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) LatestInvoice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TimestampResponse, error) {
	out := new(TimestampResponse)
	err := c.cc.Invoke(ctx, "/agent.AgentAPI/LatestInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) Forwards(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/agent.AgentAPI/Forwards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) LatestForward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TimestampResponse, error) {
	out := new(TimestampResponse)
	err := c.cc.Invoke(ctx, "/agent.AgentAPI/LatestForward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) LiquidityAds(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/agent.AgentAPI/LiquidityAds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) LatestLiquidityAd(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TimestampResponse, error) {
	out := new(TimestampResponse)
	err := c.cc.Invoke(ctx, "/agent.AgentAPI/LatestLiquidityAd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentAPIServer is the server API for AgentAPI service.
// All implementations must embed UnimplementedAgentAPIServer
// for forward compatibility
type AgentAPIServer interface {
	Payments(context.Context, *DataRequest) (*Empty, error)
	LatestPayment(context.Context, *Empty) (*TimestampResponse, error)
	Invoices(context.Context, *DataRequest) (*Empty, error)
	LatestInvoice(context.Context, *Empty) (*TimestampResponse, error)
	Forwards(context.Context, *DataRequest) (*Empty, error)
	LatestForward(context.Context, *Empty) (*TimestampResponse, error)
	LiquidityAds(context.Context, *DataRequest) (*Empty, error)
	LatestLiquidityAd(context.Context, *Empty) (*TimestampResponse, error)
	mustEmbedUnimplementedAgentAPIServer()
}

// UnimplementedAgentAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAgentAPIServer struct {
}

func (UnimplementedAgentAPIServer) Payments(context.Context, *DataRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Payments not implemented")
}
func (UnimplementedAgentAPIServer) LatestPayment(context.Context, *Empty) (*TimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestPayment not implemented")
}
func (UnimplementedAgentAPIServer) Invoices(context.Context, *DataRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoices not implemented")
}
func (UnimplementedAgentAPIServer) LatestInvoice(context.Context, *Empty) (*TimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestInvoice not implemented")
}
func (UnimplementedAgentAPIServer) Forwards(context.Context, *DataRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Forwards not implemented")
}
func (UnimplementedAgentAPIServer) LatestForward(context.Context, *Empty) (*TimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestForward not implemented")
}
func (UnimplementedAgentAPIServer) LiquidityAds(context.Context, *DataRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityAds not implemented")
}
func (UnimplementedAgentAPIServer) LatestLiquidityAd(context.Context, *Empty) (*TimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestLiquidityAd not implemented")
}
func (UnimplementedAgentAPIServer) mustEmbedUnimplementedAgentAPIServer() {}

// UnsafeAgentAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentAPIServer will
// result in compilation errors.
type UnsafeAgentAPIServer interface {
	mustEmbedUnimplementedAgentAPIServer()
}

func RegisterAgentAPIServer(s grpc.ServiceRegistrar, srv AgentAPIServer) {
	s.RegisterService(&AgentAPI_ServiceDesc, srv)
}

func _AgentAPI_Payments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).Payments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.AgentAPI/Payments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).Payments(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_LatestPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).LatestPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.AgentAPI/LatestPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).LatestPayment(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_Invoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).Invoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.AgentAPI/Invoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).Invoices(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_LatestInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).LatestInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.AgentAPI/LatestInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).LatestInvoice(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_Forwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).Forwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.AgentAPI/Forwards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).Forwards(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_LatestForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).LatestForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.AgentAPI/LatestForward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).LatestForward(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_LiquidityAds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).LiquidityAds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.AgentAPI/LiquidityAds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).LiquidityAds(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_LatestLiquidityAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).LatestLiquidityAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.AgentAPI/LatestLiquidityAd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).LatestLiquidityAd(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentAPI_ServiceDesc is the grpc.ServiceDesc for AgentAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.AgentAPI",
	HandlerType: (*AgentAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Payments",
			Handler:    _AgentAPI_Payments_Handler,
		},
		{
			MethodName: "LatestPayment",
			Handler:    _AgentAPI_LatestPayment_Handler,
		},
		{
			MethodName: "Invoices",
			Handler:    _AgentAPI_Invoices_Handler,
		},
		{
			MethodName: "LatestInvoice",
			Handler:    _AgentAPI_LatestInvoice_Handler,
		},
		{
			MethodName: "Forwards",
			Handler:    _AgentAPI_Forwards_Handler,
		},
		{
			MethodName: "LatestForward",
			Handler:    _AgentAPI_LatestForward_Handler,
		},
		{
			MethodName: "LiquidityAds",
			Handler:    _AgentAPI_LiquidityAds_Handler,
		},
		{
			MethodName: "LatestLiquidityAd",
			Handler:    _AgentAPI_LatestLiquidityAd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}
